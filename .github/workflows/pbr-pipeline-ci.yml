name: PBR Pipeline CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'astraweave-render/**'
      - 'tools/aw_asset_cli/**'
      - 'tools/aw_editor/**'
      - 'examples/unified_showcase/**'
      - 'shaders/**'
      - '.github/workflows/pbr-pipeline-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'astraweave-render/**'
      - 'tools/aw_asset_cli/**'
      - 'tools/aw_editor/**'
      - 'examples/unified_showcase/**'
      - 'shaders/**'
      - '.github/workflows/pbr-pipeline-ci.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-pbr-components:
    name: Build PBR Components
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}
        components: rustfmt, clippy
    
    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-pbr-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-pbr-
          ${{ runner.os }}-cargo-
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxcursor-dev libxrandr-dev libxi-dev \
          libasound2-dev mesa-vulkan-drivers libvulkan1
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Build astraweave-render
      run: |
        echo "::group::Building astraweave-render"
        cargo build -p astraweave-render --release
        echo "::endgroup::"
    
    - name: Build aw_asset_cli
      run: |
        echo "::group::Building aw_asset_cli"
        cargo build -p aw_asset_cli --release
        echo "::endgroup::"
    
    - name: Build aw_editor
      run: |
        echo "::group::Building aw_editor"
        cargo build -p aw_editor --release
        echo "::endgroup::"
    
    - name: Run clippy (render crate)
      run: |
        cargo clippy -p astraweave-render --all-features -- -D warnings
    
    - name: Run clippy (asset CLI)
      run: |
        cargo clippy -p aw_asset_cli --all-features -- -D warnings
    
    - name: Run clippy (editor)
      continue-on-error: true  # Allow warnings for editor (future features)
      run: |
        cargo clippy -p aw_editor --all-features -- -W clippy::all
  
  test-pbr-features:
    name: Test PBR Features
    runs-on: ubuntu-latest
    needs: build-pbr-components
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxcursor-dev libxrandr-dev libxi-dev \
          libasound2-dev mesa-vulkan-drivers libvulkan1
    
    - name: Test astraweave-render
      run: |
        echo "::group::Testing astraweave-render"
        cargo test -p astraweave-render --all-features -- --nocapture
        echo "::endgroup::"
    
    - name: Test terrain materials
      run: |
        echo "::group::Testing terrain material system"
        cargo test -p astraweave-render test_terrain_material -- --nocapture
        echo "::endgroup::"
    
    - name: Test advanced materials
      run: |
        echo "::group::Testing advanced PBR features"
        cargo test -p astraweave-render test_pbr_advanced -- --nocapture
        echo "::endgroup::"
    
    - name: Generate test summary
      if: always()
      run: |
        echo "## ðŸ§ª PBR Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Tested Components:" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… astraweave-render (core PBR)" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Terrain material system (Phase PBR-F)" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Advanced materials (Phase PBR-E)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "See job logs for detailed test results." >> $GITHUB_STEP_SUMMARY
  
  validate-shaders:
    name: Validate WGSL Shaders
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install wgsl-analyzer
      run: |
        cargo install --locked wgsl-analyzer || echo "wgsl-analyzer installation optional"
    
    - name: Check shader syntax
      continue-on-error: true
      run: |
        echo "::group::Validating WGSL shaders"
        for shader in shaders/*.wgsl; do
          echo "Checking: $shader"
          # Basic syntax check (file exists and not empty)
          if [ ! -s "$shader" ]; then
            echo "::error file=$shader::Shader file is empty or missing"
          fi
        done
        echo "::endgroup::"
    
    - name: List shader files
      run: |
        echo "## ðŸ“œ WGSL Shaders" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Shader Files:" >> $GITHUB_STEP_SUMMARY
        for shader in shaders/*.wgsl; do
          lines=$(wc -l < "$shader" 2>/dev/null || echo "?")
          echo "- \`$(basename $shader)\` (${lines} lines)" >> $GITHUB_STEP_SUMMARY
        done
