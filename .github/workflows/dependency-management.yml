name: Dependency Management & Security

on:
  schedule:
    # Run daily at 2 AM UTC to keep caches warm and security up-to-date
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      cache_action:
        description: 'Cache management action'
        required: true
        default: 'warm'
        type: choice
        options: [warm, clean, rebuild]
      security_audit:
        description: 'Run comprehensive security audit'
        required: false
        default: true
        type: boolean

# Ensure bash everywhere (Windows default is pwsh)
defaults:
  run:
    shell: bash

# Prevent multiple cache management runs
concurrency:
  group: dependency-management-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_RETRY: 10
  CARGO_INCREMENTAL: 0  # Better for CI with sccache
  RUST_BACKTRACE: short
  SCCACHE_CACHE_SIZE: "10G"
  SCCACHE_IDLE_TIMEOUT: 0
  # Consistent exclusion list for problematic crates
  EXCLUDED_PACKAGES: "--exclude astraweave-author --exclude visual_3d --exclude ui_controls_demo --exclude npc_town_demo --exclude rhai_authoring --exclude cutscene_render_demo --exclude weaving_playground --exclude combat_physics_demo --exclude navmesh_demo --exclude physics_demo3d --exclude debug_toolkit_demo --exclude aw_editor"

jobs:
  security-audit:
    name: Security Audit & Dependency Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -y -q build-essential pkg-config cmake ninja-build

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: audit-cache-v3
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install audit tools
        run: |
          cargo install --locked cargo-audit || echo "cargo-audit already installed"
          cargo install --locked cargo-deny || echo "cargo-deny already installed"
          cargo install --locked cargo-outdated || echo "cargo-outdated already installed"

      - name: Run security audit
        run: |
          echo "Running cargo audit..."
          cargo audit --ignore RUSTSEC-2020-0071 || echo "Audit completed with warnings"

      - name: Run cargo-deny check
        run: |
          if [ -f "deny.toml" ]; then
            echo "Running cargo deny check..."
            cargo deny check || echo "Deny check completed with warnings"
          else
            echo "deny.toml not found; skipping cargo-deny"
          fi

      - name: Check for outdated dependencies
        run: |
          echo "Checking for outdated dependencies..."
          cargo outdated --workspace --format json > outdated.json || true

      - name: Generate comprehensive audit report
        run: |
          echo "## Security & Dependency Audit Report" > audit-report.md
          echo "Generated on: $(date)" >> audit-report.md
          echo "" >> audit-report.md
          
          echo "### Security Audit Results" >> audit-report.md
          echo '```' >> audit-report.md
          cargo audit --format json >> audit-report.md 2>&1 || true
          echo '```' >> audit-report.md
          echo "" >> audit-report.md
          
          echo "### Outdated Dependencies" >> audit-report.md
          echo '```json' >> audit-report.md
          cat outdated.json >> audit-report.md 2>/dev/null || echo "No outdated dependencies data available" >> audit-report.md
          echo '```' >> audit-report.md

      - name: Upload audit reports
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report-${{ github.run_number }}
          path: |
            audit-report.md
            outdated.json
          retention-days: 30

  cache-optimization:
    name: "Cache Optimization (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -q
          sudo apt-get install -y -q \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install pkg-config cmake

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: echo "Windows dependencies managed via vcpkg"

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Cache cleanup (if requested)
        if: github.event.inputs.cache_action == 'clean'
        run: |
          cargo clean
          rm -rf ~/.cargo/registry/cache || true
          rm -rf ~/.cargo/git/db || true

      - name: Setup optimized cache
        uses: Swatinem/rust-cache@v2
        with:
          key: cache-mgmt-${{ matrix.os }}-v4
          cache-all-crates: true
          save-if: ${{ github.event.inputs.cache_action != 'clean' }}

      - name: Configure sccache
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: Show sccache stats (before)
        run: sccache --show-stats || true

      - name: Warm dependency cache
        if: github.event.inputs.cache_action == 'warm' || github.event_name == 'schedule'
        run: |
          # Fetch all dependencies first
          cargo fetch --locked
          # Pre-compile core workspace components (exclude problematic crates)
          cargo check --workspace ${{ env.EXCLUDED_PACKAGES }}
          # Pre-compile in release mode for core crates
          cargo check --release \
            -p astraweave-core \
            -p astraweave-ai \
            -p astraweave-physics \
            -p astraweave-render \
            -p astraweave-nav \
            -p hello_companion

      - name: Rebuild cache (if requested)
        if: github.event.inputs.cache_action == 'rebuild'
        run: |
          cargo clean
          echo "Rebuilding workspace (excluding problematic crates)..."
          cargo build --workspace ${{ env.EXCLUDED_PACKAGES }}

      - name: Show sccache stats (after)
        run: sccache --show-stats || true

  workspace-analysis:
    name: Workspace Health Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: analysis-cache-v3
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install analysis tools
        run: |
          cargo install --locked cargo-tree || echo "cargo-tree already installed"
          cargo install --locked cargo-machete || echo "cargo-machete already installed"

      - name: Analyze workspace structure
        run: |
          echo "## Workspace Health Analysis" > analysis.md
          echo "Generated on: $(date)" >> analysis.md
          echo "" >> analysis.md
          
          echo "### Workspace Statistics" >> analysis.md
          echo "- Total crates: $(find . -name 'Cargo.toml' | wc -l)" >> analysis.md
          echo "- Total Rust files: $(find . -name '*.rs' | wc -l)" >> analysis.md
          echo "- Total lines of code: $(find . -name '*.rs' -exec wc -l {} + | tail -1 | awk '{print $1}')" >> analysis.md
          echo "" >> analysis.md
          
          echo "### Dependency Tree (Top 50)" >> analysis.md
          echo '```' >> analysis.md
          cargo tree --workspace ${{ env.EXCLUDED_PACKAGES }} --format "{p} {f}" | head -50 >> analysis.md
          echo '```' >> analysis.md

      - name: Find unused dependencies
        run: |
          echo "" >> analysis.md
          echo "### Unused Dependencies Analysis" >> analysis.md
          echo '```' >> analysis.md
          cargo machete --with-metadata ${{ env.EXCLUDED_PACKAGES }} >> analysis.md 2>&1 || echo "Analysis completed with warnings" >> analysis.md
          echo '```' >> analysis.md

      - name: Workspace dependency graph
        run: |
          echo "" >> analysis.md
          echo "### Core Dependencies Overview" >> analysis.md
          echo '```' >> analysis.md
          cargo tree --workspace ${{ env.EXCLUDED_PACKAGES }} --graph-features --charset ascii | head -100 >> analysis.md 2>&1 || echo "Dependency graph generation completed"
          echo '```' >> analysis.md

      - name: Upload analysis report
        uses: actions/upload-artifact@v4
        with:
          name: workspace-analysis-report-${{ github.run_number }}
          path: analysis.md
          retention-days: 30
