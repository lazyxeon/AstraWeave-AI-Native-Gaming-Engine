name: Optimized Rust Build with Advanced Caching

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Prevent multiple CI runs on same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0  # Disable incremental compilation (conflicts with sccache)
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTFLAGS: "-D warnings -W unreachable-pub -W bare-trait-objects"
  RUSTDOCFLAGS: "-D warnings"
  # Optimize sccache usage
  SCCACHE_CACHE_SIZE: "10G"
  SCCACHE_IDLE_TIMEOUT: 0
  # Problematic packages to exclude from builds
  EXCLUDED_PACKAGES: "--exclude ui_controls_demo --exclude npc_town_demo --exclude rhai_authoring --exclude navmesh_demo --exclude cutscene_render_demo --exclude weaving_playground --exclude combat_physics_demo"

jobs:
  cache-strategy:
    name: Cache Strategy Matrix
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60  # Prevent hanging jobs
    strategy:
      fail-fast: false  # Allow other jobs to continue if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, "1.89.0", beta]
        build-type: [debug, release]
        include:
          # Primary configuration - runs all checks
          - os: ubuntu-latest
            rust: stable
            build-type: debug
            primary: true
          # Artifact builds
          - os: ubuntu-latest
            rust: "1.89.0"
            build-type: release
            artifacts: true
        exclude:
          # Reduce matrix size - skip beta builds on non-primary platforms
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
          # Skip debug builds on Windows/macOS to save CI time
          - os: windows-latest
            build-type: debug
          - os: macos-latest
            build-type: debug

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          # Fetch full history for better cache keys
          fetch-depth: 0

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy, rust-src
          targets: ${{ matrix.os == 'ubuntu-latest' && 'x86_64-unknown-linux-gnu' || matrix.os == 'windows-latest' && 'x86_64-pc-windows-msvc' || 'x86_64-apple-darwin' }}

      # ---- Platform-specific dependencies ----
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install pkg-config

      - name: Install sccache (Ubuntu/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          SCCACHE_VERSION="v0.8.2"
          SCCACHE_ARCH=${{ matrix.os == 'ubuntu-latest' && 'x86_64-unknown-linux-musl' || 'x86_64-apple-darwin' }}
          curl -L "https://github.com/mozilla/sccache/releases/download/${SCCACHE_VERSION}/sccache-${SCCACHE_VERSION}-${SCCACHE_ARCH}.tar.gz" | tar -xz
          sudo mv sccache-*/sccache /usr/local/bin/
          chmod +x /usr/local/bin/sccache

      - name: Install sccache (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $SCCACHE_VERSION = "v0.8.2"
          Invoke-WebRequest -Uri "https://github.com/mozilla/sccache/releases/download/$SCCACHE_VERSION/sccache-$SCCACHE_VERSION-x86_64-pc-windows-msvc.tar.gz" -OutFile "sccache.tar.gz"
          tar -xzf sccache.tar.gz
          Move-Item "sccache-*/sccache.exe" "C:/Windows/System32/"

      # ---- Advanced Rust caching ----
      - name: Set up advanced Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          # Workspace root for cargo workspace
          workspaces: "."
          # Custom cache key components for matrix builds
          key: ${{ matrix.os }}-${{ matrix.rust }}-${{ matrix.build-type }}-v2
          # Additional paths for sccache and tools
          cache-directories: |
            ~/.cargo/bin/
            target/sccache
          # Enable caching for all workspace crates
          cache-all-crates: true
          # Cache even on build failures for debugging
          cache-on-failure: true
          # Only save cache on main branch pushes to reduce storage usage
          save-if: ${{ github.ref == 'refs/heads/main' || matrix.primary }}

      # ---- sccache configuration ----
      - name: Configure sccache
        shell: bash
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_DIR=${{ github.workspace }}/target/sccache" >> $GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=10G" >> $GITHUB_ENV
          echo "SCCACHE_IDLE_TIMEOUT=0" >> $GITHUB_ENV
          # Create sccache directory
          mkdir -p "${{ github.workspace }}/target/sccache"
          sccache --start-server

      - name: Show sccache stats (before)
        run: sccache --show-stats

      # ---- Optimized build process ----
      - name: Fetch dependencies (cache warming)
        run: cargo fetch --locked

      - name: Build workspace (debug)
        if: matrix.build-type == 'debug'
        run: |
          cargo build --frozen --workspace ${{ env.EXCLUDED_PACKAGES }}

      - name: Build workspace (release)
        if: matrix.build-type == 'release'
        run: |
          cargo build --frozen --release --workspace ${{ env.EXCLUDED_PACKAGES }}

      # ---- Core component testing ----
      - name: Install cargo-nextest
        if: matrix.primary
        run: |
          cargo install --locked cargo-nextest || echo "cargo-nextest install failed, using standard cargo test"

      - name: Run core tests
        if: matrix.primary
        run: |
          # Try with nextest first, fallback to regular test
          if command -v cargo-nextest &> /dev/null; then
            cargo nextest run --frozen --workspace ${{ env.EXCLUDED_PACKAGES }} || \
            cargo test --frozen --workspace ${{ env.EXCLUDED_PACKAGES }}
          else
            cargo test --frozen --workspace ${{ env.EXCLUDED_PACKAGES }}
          fi

      # ---- Code quality checks (primary configuration only) ----
      - name: Check formatting
        if: matrix.primary
        run: cargo fmt --all --check

      - name: Run clippy
        if: matrix.primary
        run: |
          cargo clippy --frozen --workspace ${{ env.EXCLUDED_PACKAGES }} \
            --all-features --all-targets -- -D warnings

      # ---- Documentation ----
      - name: Check documentation
        if: matrix.primary
        run: |
          cargo doc --frozen --workspace ${{ env.EXCLUDED_PACKAGES }} --no-deps

      # ---- Security audit ----
      - name: Security audit
        if: matrix.primary
        run: |
          cargo install --locked cargo-audit || true
          cargo audit --ignore RUSTSEC-2020-0071 || true

      # ---- Benchmarks (release builds only) ----
      - name: Run benchmarks
        if: matrix.build-type == 'release' && matrix.primary
        run: |
          cargo bench --frozen \
            -p astraweave-core \
            -p astraweave-physics \
            -p astraweave-nav \
            --all-features || true  # Continue on benchmark failure

      # ---- Cache optimization stats ----
      - name: Show sccache stats (after)
        run: sccache --show-stats

      - name: Stop sccache server
        run: sccache --stop-server || true

      # ---- Artifact collection ----
      - name: Upload build artifacts
        if: matrix.artifacts && matrix.build-type == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: veilweaver-${{ matrix.os }}-${{ matrix.rust }}
          path: |
            target/release/hello_companion*
            target/release/physics_demo3d*
            target/release/navmesh_demo*
          retention-days: 7

  # ---- Cache warming job ----
  cache-warming:
    name: Cache Warming
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev \
            libasound2-dev libudev-dev

      - name: Set up cache warming
        uses: Swatinem/rust-cache@v2
        with:
          save-if: true
          key: cache-warming-v2
          cache-all-crates: true

      - name: Warm up dependency cache
        run: |
          cargo fetch --locked
          # Pre-build dependencies only (no source compilation)
          cargo check --frozen --workspace ${{ env.EXCLUDED_PACKAGES }} || true
          # Warm up common target configurations
          cargo check --frozen --release -p astraweave-core -p astraweave-ai || true

  # ---- Cross-compilation matrix ----
  cross-compile:
    name: Cross Compilation
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        target: 
          - x86_64-pc-windows-gnu
          - aarch64-unknown-linux-gnu
          # - wasm32-unknown-unknown  # For future web builds
          
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64 gcc-aarch64-linux-gnu

      - name: Set up cross-compilation cache
        uses: Swatinem/rust-cache@v2
        with:
          key: cross-${{ matrix.target }}-v2
          cache-all-crates: true

      - name: Fetch dependencies
        run: cargo fetch --locked

      - name: Cross compile core components
        run: |
          cargo check --target ${{ matrix.target }} --frozen \
            -p astraweave-core \
            -p astraweave-ai \
            -p astraweave-physics \
            -p astraweave-nav || true  # Allow failures for experimental targets

  # ---- Summary job ----
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [cache-strategy, cache-warming, cross-compile]
    if: always()
    steps:
      - name: Check CI status
        run: |
          if [[ "${{ needs.cache-strategy.result }}" == "success" && 
                ("${{ needs.cache-warming.result }}" == "success" || "${{ needs.cache-warming.result }}" == "skipped") &&
                ("${{ needs.cross-compile.result }}" == "success" || "${{ needs.cross-compile.result }}" == "skipped") ]]; then
            echo "✅ CI pipeline completed successfully!"
            exit 0
          else
            echo "❌ CI pipeline failed!"
            echo "cache-strategy: ${{ needs.cache-strategy.result }}"
            echo "cache-warming: ${{ needs.cache-warming.result }}"
            echo "cross-compile: ${{ needs.cross-compile.result }}"
            exit 1
          fi

