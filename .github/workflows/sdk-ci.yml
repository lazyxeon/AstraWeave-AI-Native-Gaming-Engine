name: SDK Header and C Harness CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-sdk-and-c:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Build SDK
        run: cargo build -p astraweave-sdk --release
      - name: Install cbindgen
        run: cargo install cbindgen
      - name: Generate header
        run: cbindgen astraweave-sdk -o astraweave-sdk/aw_sdk.h
      - name: Upload header artifact
        uses: actions/upload-artifact@v4
        with:
          name: aw_sdk-header
          path: astraweave-sdk/aw_sdk.h
      - name: Compile C harness (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cat > c_harness.c << 'EOF'
          #include <stdio.h>
          #include <stdint.h>
          #include "astraweave-sdk/aw_sdk.h"
          static void cb(const char* s){ if(s) fprintf(stderr, "SNAP:%s\n", s); }
          int main(){
            struct AWVersion v = aw_version();
            printf("%u.%u.%u\n", v.major, v.minor, v.patch);
            // lightly exercise world and callback
            struct AWWorld w = aw_world_create();
            aw_world_set_snapshot_callback(w, cb);
            aw_world_tick(w, 0.016f);
            aw_world_destroy(w);
            return 0;
          }
          EOF
          cc -I. -L target/release -o c_harness c_harness.c -lastraweave_sdk -lpthread -ldl -lm
          ./c_harness | tee harness_out.txt
          # Semantic version gate: compare printed version to Cargo.toml version
          VER=$(sed -n 's/^version\s*=\s*"\([^"]\+\)"/\1/p' astraweave-sdk/Cargo.toml | head -n1)
          OUT=$(head -n1 harness_out.txt)
          echo "SDK Crate Version: $VER; Runtime: $OUT"
          test "$OUT" = "$VER"
      - name: Cinematics smoke test
        if: matrix.os == 'ubuntu-latest'
        run: cargo test -p astraweave-cinematics --quiet
      - name: Compile C harness (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Set-Content -Path c_harness.c -Value @'
          #include <stdio.h>
          #include <stdint.h>
          #include "astraweave-sdk/aw_sdk.h"
          static void cb(const char* s){ if(s) fprintf(stderr, "SNAP:%s\n", s); }
          int main(){
            struct AWVersion v = aw_version();
            printf("%u.%u.%u\n", v.major, v.minor, v.patch);
            struct AWWorld w = aw_world_create();
            aw_world_set_snapshot_callback(w, cb);
            aw_world_tick(w, 0.016f);
            aw_world_destroy(w);
            return 0;
          }
          '@
          cl /I. c_harness.c /link /LIBPATH:target\release astraweave_sdk.lib
          if (Test-Path target\release\astraweave_sdk.dll) { Copy-Item target\release\astraweave_sdk.dll . }
          .\c_harness.exe | Tee-Object -FilePath harness_out.txt | Out-Null
          # Semantic version gate (Windows)
          $ver = (Select-String -Path astraweave-sdk/Cargo.toml -Pattern '^version\s*=\s*"([^"]+)"' | ForEach-Object { $_.Matches[0].Groups[1].Value })[0]
          $out = Get-Content harness_out.txt | Select-Object -First 1
          Write-Host "SDK Crate Version: $ver; Runtime: $out"
          if ($out -ne $ver) { throw "Version mismatch: $out vs $ver" }
      - name: Cinematics smoke test (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: cargo test -p astraweave-cinematics --quiet
      - name: CMake example (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p cmake_example
          cat > cmake_example/CMakeLists.txt << 'EOF'
          cmake_minimum_required(VERSION 3.15)
          project(aw_cmake_example C)
          add_executable(aw_cmake_example main.c)
          include_directories(${CMAKE_SOURCE_DIR}/..)
          link_directories(${CMAKE_SOURCE_DIR}/../target/release)
          target_link_libraries(aw_cmake_example astraweave_sdk)
          EOF
          cat > cmake_example/main.c << 'EOF'
          #include <stdio.h>
          #include "astraweave-sdk/aw_sdk.h"
          int main(){ struct AWWorld w = aw_world_create(); aw_world_tick(w, 0.016f); aw_world_destroy(w); return 0; }
          EOF
          cmake -S cmake_example -B cmake_build
          cmake --build cmake_build --config Release
          LD_LIBRARY_PATH=target/release ./cmake_build/aw_cmake_example
      - name: CMake example (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path cmake_example | Out-Null
          Set-Content -Path cmake_example/CMakeLists.txt -Value @'
          cmake_minimum_required(VERSION 3.15)
          project(aw_cmake_example C)
          add_executable(aw_cmake_example main.c)
          include_directories(${CMAKE_SOURCE_DIR}/..)
          link_directories(${CMAKE_SOURCE_DIR}/..\target\release)
          target_link_libraries(aw_cmake_example astraweave_sdk)
          '@
          Set-Content -Path cmake_example/main.c -Value @'
          #include <stdio.h>
          #include "astraweave-sdk/aw_sdk.h"
          int main(){ struct AWWorld w = aw_world_create(); aw_world_tick(w, 0.016f); aw_world_destroy(w); return 0; }
          '@
          cmake -S cmake_example -B cmake_build
          cmake --build cmake_build --config Release
          Copy-Item target\release\astraweave_sdk.dll cmake_build\Release -ErrorAction SilentlyContinue
          $env:Path = "$pwd\target\release;$env:Path"
          if (Test-Path cmake_build\Release\aw_cmake_example.exe) { .\cmake_build\Release\aw_cmake_example.exe } else { .\cmake_build\aw_cmake_example.exe }