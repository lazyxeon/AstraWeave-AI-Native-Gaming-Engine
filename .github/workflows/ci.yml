name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      # ---- OS prerequisites (Linux/macOS) ----
      - name: Install native deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          # Core dev tools
          sudo apt-get install -y build-essential pkg-config cmake ninja-build
          # X11 + GL/EGL for winit/glutin/egui (wgpu paths)
          sudo apt-get install -y \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev
          # Wayland headers (winit can target both X11 and Wayland)
          sudo apt-get install -y wayland-protocols libwayland-dev
          # Audio for cpal/rodio
          sudo apt-get install -y libasound2-dev libpulse-dev
          # Vulkan runtime (not strictly needed to compile, helpful for runtime CI/tools)
          sudo apt-get install -y mesa-vulkan-drivers vulkan-tools
          # Zip/other misc used by builds
          sudo apt-get install -y unzip zip

      - name: Install native deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config

      # Windows generally builds out-of-the-box for these crates.
      # If you later need Vulkan SDK or other DLLs for runtime tests, add a step here.

      # ---- Cargo caches ----
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache cargo git
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-git-

      - name: Cache build artifacts (target/)
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-target-

      # ---- Build (deterministic) ----
      - name: Build (debug)
        run: cargo build --workspace --locked --verbose

      # Optionally, also build release artifacts
      - name: Build (release)
        run: cargo build --workspace --locked --release --verbose

      # Optional checks
      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy (lint)
        run: cargo clippy --workspace --all-features -- -D warnings

  # You can create a separate job for unit tests, but build is the top priority initially.
