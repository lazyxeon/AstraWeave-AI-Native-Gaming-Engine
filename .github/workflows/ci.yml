name: Comprehensive CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Prevent multiple CI runs on same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Harden token scope (helps with Scorecard "Token-Permissions")
permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy, rust-src, rust-analyzer

      # ---- OS-specific system dependencies ----
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config

      # ---- Cargo cache ----
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ci-${{ matrix.os }}-v2
          cache-all-crates: true

      # ---- Pre-fetch for better caching determinism ----
      - name: Fetch dependencies
        run: cargo fetch --locked

      # ---- Core component checks ----
      - name: Cargo check (workspace - all crates now work!)
        run: cargo check --locked --workspace

  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy

      # ---- OS-specific system dependencies ----
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config

      # ---- Cargo cache ----
      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: build-${{ matrix.os }}
          cache-all-crates: true

      # ---- Build core working components (debug) ----
      - name: Build core components (debug)
        run: >
          cargo build --frozen --verbose
          -p astraweave-core
          -p astraweave-ai
          -p astraweave-physics
          -p astraweave-nav
          -p astraweave-render
          -p astraweave-gameplay
          -p astraweave-audio
          -p astraweave-npc
          -p astraweave-input
          -p astraweave-ui
          -p astraweave-net
          -p astraweave-director
          -p astraweave-memory
          -p astraweave-persona
          -p astraweave-llm
          -p astraweave-ipc
          -p astraweave-author
          -p hello_companion

      # ---- Build all examples (debug) ----
      - name: Build all examples (debug)
        run: >
          cargo build --frozen --verbose
          -p hello_companion
          -p adaptive_boss
          -p companion_profile
          -p ipc_loopback
          -p debug_overlay
          -p llm_toolcall
          -p llm_integration
          -p phase_director
          -p persona_loader
          -p rhai_authoring
          -p coop_server
          -p coop_client
          -p visual_3d
          -p physics_demo3d
          -p navmesh_demo
          -p weaving_playground
          -p crafting_combat_demo
          -p quest_dialogue_demo
          -p combat_physics_demo
          -p cutscene_render_demo
          -p audio_spatial_demo
          -p dialogue_voice_demo
          -p npc_town_demo
          -p ui_controls_demo

      # ---- Release build for selected core components ----
      - name: Build core components (release)
        run: >
          cargo build --frozen --release --verbose
          -p astraweave-core
          -p astraweave-ai
          -p astraweave-physics
          -p astraweave-nav
          -p astraweave-render
          -p astraweave-author
          -p hello_companion

  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      # ---- OS-specific system dependencies ----
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config

      # ---- Cargo cache ----
      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.os }}
          cache-all-crates: true

      # ---- Run tests ----
      - name: Run tests (all workspace crates)
        run: cargo test --workspace --locked --lib

  linting:
    name: Code Quality (Linux)
    runs-on: ubuntu-latest
    needs: check

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: linting
          cache-all-crates: true

      - name: Check code formatting
        run: cargo fmt --all --check

      - name: Run Clippy (all workspace crates)
        run: cargo clippy --workspace --locked --all-features --all-targets

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: check

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: security
          cache-all-crates: true

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Run cargo-deny (if config present)
        run: |
          if [ -f "deny.toml" ] || [ -f ".cargo/deny.toml" ] || [ -f "deny/config.toml" ]; then
            cargo install cargo-deny
            cargo deny check
          else
            echo "cargo-deny config not found; skipping."
          fi

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev \
            libasound2-dev libudev-dev

      - name: Extract MSRV from Cargo.toml
        id: msrv
        shell: bash
        run: |
          MSRV=$(grep -hR '^\s*rust-version\s*=' --include Cargo.toml . | head -1 | sed 's/.*"//;s/".*//')
          if [ -z "$MSRV" ]; then MSRV="1.82.0"; fi
          echo "version=$MSRV" >> $GITHUB_OUTPUT

      - name: Install MSRV toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.msrv.outputs.version }}

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: msrv-${{ steps.msrv.outputs.version }}

      - name: Check MSRV compatibility
        run: cargo check --workspace --locked

  demo:
    name: Demo Execution (Linux)
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: demo
          cache-all-crates: true

      - name: Build hello_companion demo
        run: cargo build --release -p hello_companion

      - name: Run hello_companion demo (with timeout)
        run: |
          echo "Running hello_companion demo for 10 seconds..."
          timeout 10s cargo run --release -p hello_companion || echo "Demo completed or timed out as expected"
