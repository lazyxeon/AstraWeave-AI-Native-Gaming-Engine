name: Comprehensive CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Prevent multiple CI runs on same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Harden token scope (helps with Scorecard "Token-Permissions")  
permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0  # Better for CI with sccache
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  SCCACHE_CACHE_SIZE: "10G"
  SCCACHE_IDLE_TIMEOUT: 0
  # Centralized exclusion list for problematic crates
  EXCLUDED_PACKAGES: "--exclude astraweave-author --exclude visual_3d --exclude ui_controls_demo --exclude npc_town_demo --exclude rhai_authoring --exclude cutscene_render_demo --exclude weaving_playground --exclude combat_physics_demo --exclude navmesh_demo --exclude physics_demo3d --exclude debug_toolkit_demo --exclude aw_editor"

jobs:
  check:
    name: Quick Check (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        # Only run on other platforms for main branch pushes and PRs to main
        include:
          - os: macos-latest
            if: github.ref == 'refs/heads/main' || github.base_ref == 'main'
          - os: windows-latest
            if: github.ref == 'refs/heads/main' || github.base_ref == 'main'

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -q
          sudo apt-get install -y -q \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config
          # Ensure we use system OpenSSL to avoid ring crate issues
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl)/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl)/include" >> $GITHUB_ENV
          brew install pkg-config cmake

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Windows dependencies managed via vcpkg"

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: check-${{ matrix.os }}-v5
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Configure sccache
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: Fetch dependencies
        run: cargo fetch --locked

      - name: Check workspace (core components)
        run: cargo check --locked --workspace ${{ env.EXCLUDED_PACKAGES }}

  build:
    name: Build & Test (${{ matrix.os }}, ${{ matrix.profile }})
    runs-on: ${{ matrix.os }}
    needs: check
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        profile: [debug, release]
        # Extend matrix for main branch
        include:
          - os: macos-latest
            profile: debug
            if: github.ref == 'refs/heads/main' || github.base_ref == 'main'
          - os: windows-latest
            profile: debug
            if: github.ref == 'refs/heads/main' || github.base_ref == 'main'

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -q
          sudo apt-get install -y -q \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config cmake


      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: build-${{ matrix.os }}-v5
          cache-all-crates: true
          cache-directories: |
            ~/.cargo/bin/
            ~/.cargo/registry/cache/

      # ---- Build core working components (debug) ----
      - name: Build core components (debug)
        run: >
          cargo build --frozen --verbose
          -p astraweave-core
          -p astraweave-ai
          -p astraweave-physics
          -p astraweave-nav
          -p astraweave-render
          -p astraweave-gameplay
          -p astraweave-audio
          -p astraweave-npc
          -p astraweave-input
          -p astraweave-ui
          -p astraweave-net
          -p astraweave-director
          -p astraweave-memory
          -p astraweave-persona
          -p astraweave-ipc
          -p astraweave-sdk
          -p hello_companion

      # ---- Build working examples (debug, non-blocking) ----
      - name: Build working examples (debug)
        continue-on-error: true
        run: >
          cargo build --frozen --verbose
          -p hello_companion
          -p adaptive_boss
          -p companion_profile
          -p ipc_loopback
          -p phase_director
          -p persona_loader
          -p coop_server
          -p coop_client
          -p audio_spatial_demo
          -p dialogue_voice_demo

      # ---- Release build for selected core components ----
      - name: Build core components (release)
        run: >
          cargo build --frozen --release --verbose
          -p astraweave-core
          -p astraweave-ai
          -p astraweave-physics
          -p astraweave-nav
          -p astraweave-render
          -p hello_companion

  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          key: build-${{ matrix.os }}-${{ matrix.profile }}-v5
          cache-all-crates: true


      - name: Configure sccache
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: Build core components (${{ matrix.profile }})
        run: |
          brew update
          brew install pkg-config
          # Ensure we use system OpenSSL to avoid ring crate issues
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl)/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl)/include" >> $GITHUB_ENV

      # ---- Cargo cache ----
      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.os }}-v5
          cache-all-crates: true
          if [ "${{ matrix.profile }}" = "release" ]; then
            PROFILE_FLAG="--release"
          else
            PROFILE_FLAG=""
          fi
          
          cargo build --locked $PROFILE_FLAG \
            -p astraweave-core \
            -p astraweave-ai \
            -p astraweave-physics \
            -p astraweave-nav \
            -p astraweave-render \
            -p astraweave-gameplay \
            -p astraweave-audio \
            -p astraweave-input \
            -p astraweave-ui \
            -p astraweave-net \
            -p astraweave-director \
            -p astraweave-memory \
            -p astraweave-persona \
            -p astraweave-ipc \
            -p astraweave-llm \
            -p astraweave-sdk \
            -p hello_companion

      - name: Build working examples (${{ matrix.profile }})
        continue-on-error: true
        run: |
          if [ "${{ matrix.profile }}" = "release" ]; then
            PROFILE_FLAG="--release"
          else
            PROFILE_FLAG=""
          fi
          
          cargo build --locked $PROFILE_FLAG \
            -p adaptive_boss \
            -p companion_profile \
            -p ipc_loopback \
            -p llm_toolcall \
            -p llm_integration \
            -p phase_director \
            -p persona_loader \
            -p coop_server \
            -p coop_client \
            -p audio_spatial_demo \
            -p dialogue_voice_demo

      - name: Run tests
        if: matrix.profile == 'debug'
        run: |
          # Install cargo-nextest if available for faster test execution
          if cargo install --list | grep -q cargo-nextest; then
            echo "Using cargo-nextest for faster test execution"
            cargo nextest run --locked --workspace ${{ env.EXCLUDED_PACKAGES }}
          else
            echo "Using standard cargo test"
            cargo test --locked --workspace --lib ${{ env.EXCLUDED_PACKAGES }}
          fi

      - name: Show sccache stats
        run: sccache --show-stats

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: check
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install system dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -y -q \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: quality-v5
          cache-all-crates: true

      - name: Configure sccache
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: security-v5
          cache-all-crates: true

      - name: Check code formatting
        run: |
          # Check formatting on core working crates only to avoid issues with problematic crates
          cargo fmt --check \
            -p astraweave-core \
            -p astraweave-ai \
            -p astraweave-physics \
            -p astraweave-nav \
            -p astraweave-render \
            -p hello_companion

      - name: Run Clippy (warnings as errors)
        run: |
          cargo clippy --workspace --locked ${{ env.EXCLUDED_PACKAGES }} \
            --all-features --all-targets -- -D warnings

      - name: Install security audit tools
        run: |
          cargo install --locked cargo-audit || echo "cargo-audit already installed"
          cargo install --locked cargo-deny || echo "cargo-deny already installed"

      - name: Run security audit
        run: |
          cargo audit --ignore RUSTSEC-2020-0071 || echo "Audit completed with warnings"

      - name: Run cargo-deny
        run: |
          if [ -f "deny.toml" ]; then
            cargo deny check || echo "Deny check completed with warnings"
          else
            echo "deny.toml not found; skipping cargo-deny"
          fi

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install system dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -y -q \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev \
            libasound2-dev libudev-dev

      - name: Extract MSRV from rust-toolchain.toml
        id: msrv
        run: |
          if [ -f "rust-toolchain.toml" ]; then
            MSRV=$(grep 'channel.*=' rust-toolchain.toml | sed 's/.*"\(.*\)".*/\1/')
          else
            MSRV="1.89.0"
          fi
          echo "version=$MSRV" >> $GITHUB_OUTPUT
          echo "Detected MSRV: $MSRV"

      - name: Install MSRV toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.msrv.outputs.version }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: msrv-${{ steps.msrv.outputs.version }}-v5

      - name: Check MSRV compatibility
        run: |
          cargo check --workspace --locked ${{ env.EXCLUDED_PACKAGES }}

  demo:
    name: Demo Validation
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -y -q \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: demo-v5
          cache-all-crates: true

      - name: Build demo applications
        run: |
          cargo build --release -p hello_companion
          cargo build --release -p ipc_loopback

      - name: Run hello_companion demo (with timeout)
        run: |
          echo "Testing hello_companion demo..."
          timeout 10s cargo run --release -p hello_companion || echo "Demo completed or timed out as expected"

      - name: Validate IPC loopback example  
        run: |
          echo "Testing IPC loopback example..."
          cargo run --release -p ipc_loopback --bin server &
          SERVER_PID=$!
          sleep 2
          timeout 5s cargo run --release -p ipc_loopback --bin client || echo "IPC test completed"
          kill $SERVER_PID 2>/dev/null || true

      - name: Upload demo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: demo-binaries-${{ github.sha }}
          path: |
            target/release/hello_companion
            target/release/server
            target/release/client
          retention-days: 7