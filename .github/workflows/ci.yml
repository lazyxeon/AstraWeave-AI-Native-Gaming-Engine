name: Comprehensive CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy, rust-src, rust-analyzer

      # ---- OS-specific system dependencies ----
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config

      # ---- Cargo caching ----
      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: check-${{ matrix.os }}
          cache-all-crates: true

      # ---- Core component checks ----
      - name: Check core components
        run: |
          cargo check --locked --workspace \
            --exclude astraweave-author \
            --exclude visual_3d \
            --exclude ui_controls_demo \
            --exclude npc_town_demo \
            --exclude rhai_authoring --exclude cutscene_render_demo --exclude weaving_playground --exclude combat_physics_demo --exclude navmesh_demo --exclude physics_demo3d \

  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy

      # ---- OS-specific system dependencies ----
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config

      # ---- Cargo caching ----
      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: build-${{ matrix.os }}
          cache-all-crates: true

      # ---- Build core working components ----
      - name: Build core components (debug)
        run: |
          cargo build --locked --verbose \
            -p astraweave-core \
            -p astraweave-ai \
            -p astraweave-physics \
            -p astraweave-nav \
            -p astraweave-render \
            -p astraweave-gameplay \
            -p astraweave-audio \
            -p astraweave-npc \
            -p astraweave-input \
            -p astraweave-ui \
            -p astraweave-net \
            -p astraweave-director \
            -p astraweave-memory \
            -p astraweave-persona \
            -p astraweave-llm \
            -p astraweave-ipc \
            -p hello_companion

      # ---- Build working examples ----
      - name: Build working examples (debug)
        continue-on-error: true
        run: |
          cargo build --locked --verbose \
            -p hello_companion \
            -p adaptive_boss \
            -p companion_profile \
            -p ipc_loopback \
            -p llm_toolcall \
            -p phase_director \
            -p persona_loader \
            -p coop_server \
            -p coop_client \
            -p physics_demo3d \
            -p navmesh_demo \
            -p weaving_playground \
            -p crafting_combat_demo \
            -p quest_dialogue_demo \
            -p combat_physics_demo \
            -p cutscene_render_demo \
            -p audio_spatial_demo \
            -p dialogue_voice_demo

      # ---- Release build for core components ----
      - name: Build core components (release)
        run: |
          cargo build --locked --release --verbose \
            -p astraweave-core \
            -p astraweave-ai \
            -p astraweave-physics \
            -p astraweave-nav \
            -p astraweave-render \
            -p hello_companion

  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      # ---- OS-specific system dependencies ----
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config

      # ---- Cargo caching ----
      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.os }}
          cache-all-crates: true

      # ---- Run tests ----
      - name: Run tests
        run: |
          cargo test --workspace --locked \
            --exclude astraweave-author \
            --exclude visual_3d \
            --exclude ui_controls_demo \
            --exclude npc_town_demo \
            --exclude rhai_authoring --exclude cutscene_render_demo --exclude weaving_playground --exclude combat_physics_demo --exclude navmesh_demo --exclude physics_demo3d \
            --exclude cutscene_render_demo \
            --exclude weaving_playground \
            --lib

  linting:
    name: Code Quality (Linux)
    runs-on: ubuntu-latest
    needs: check

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: linting
          cache-all-crates: true

      # ---- Code formatting ----
      - name: Check code formatting
        run: |
          cargo fmt --all --check

      # ---- Clippy linting ----
      - name: Run Clippy
        run: |
          cargo clippy --workspace --locked \
            --exclude astraweave-author \
            --exclude visual_3d \
            --exclude ui_controls_demo \
            --exclude npc_town_demo \
            --exclude rhai_authoring --exclude cutscene_render_demo --exclude weaving_playground --exclude combat_physics_demo --exclude navmesh_demo --exclude physics_demo3d \
            --exclude cutscene_render_demo \
            --exclude weaving_playground \
            --all-features --all-targets -- -D warnings

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: check

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: security
          cache-all-crates: true

      - name: Run security audit
        run: cargo audit

      - name: Run cargo deny
        run: |
          cargo install cargo-deny
          cargo deny check

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev \
            libasound2-dev libudev-dev

      - name: Extract MSRV from Cargo.toml
        id: msrv
        run: |
          # Look for rust-version in workspace or package Cargo.toml
          MSRV=$(grep -r "rust-version" Cargo.toml | head -1 | cut -d'"' -f2 || echo "1.82.0")
          echo "version=$MSRV" >> $GITHUB_OUTPUT

      - name: Install MSRV toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.msrv.outputs.version }}

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: msrv-${{ steps.msrv.outputs.version }}

      - name: Check MSRV compatibility
        run: |
          cargo check --workspace --locked \
            --exclude astraweave-author \
            --exclude visual_3d \
            --exclude ui_controls_demo \
            --exclude npc_town_demo \
            --exclude rhai_authoring --exclude cutscene_render_demo --exclude weaving_playground --exclude combat_physics_demo --exclude navmesh_demo --exclude physics_demo3d \

  demo:
    name: Demo Execution (Linux)
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: demo
          cache-all-crates: true

      - name: Build hello_companion demo
        run: |
          cargo build --release -p hello_companion

      - name: Run hello_companion demo (with timeout)
        run: |
          echo "Running hello_companion demo for 10 seconds..."
          timeout 10s cargo run --release -p hello_companion || echo "Demo completed or timed out as expected"