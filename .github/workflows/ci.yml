name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Prevent multiple CI runs on same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0  # Better for CI

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      # ---- OS prerequisites (Linux/macOS) ----
      - name: Install native deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          # Core dev tools
          sudo apt-get install -y build-essential pkg-config cmake ninja-build
          # X11 + GL/EGL for winit/glutin/egui (wgpu paths)
          sudo apt-get install -y \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev
          # Wayland headers (winit can target both X11 and Wayland)
          sudo apt-get install -y wayland-protocols libwayland-dev
          # Audio for cpal/rodio
          sudo apt-get install -y libasound2-dev libpulse-dev libudev-dev
          # Vulkan runtime (not strictly needed to compile, helpful for runtime CI/tools)
          sudo apt-get install -y mesa-vulkan-drivers vulkan-tools
          # Zip/other misc used by builds
          sudo apt-get install -y unzip zip

      - name: Install native deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config

      # Windows generally builds out-of-the-box for these crates.
      # If you later need Vulkan SDK or other DLLs for runtime tests, add a step here.

      # ---- Cargo caches (improved) ----
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ci-${{ matrix.os }}-v2
          cache-all-crates: true

      # ---- Build (deterministic) ----
      # Fetch dependencies first for better caching
      - name: Fetch dependencies
        shell: bash
        run: cargo fetch --locked

      # Build core working components (as per project instructions)
      - name: Build (debug) - Core Components
        shell: bash
        run: |
          cargo build --frozen --verbose \
            -p astraweave-core \
            -p astraweave-ai \
            -p astraweave-physics \
            -p astraweave-nav \
            -p astraweave-render \
            -p astraweave-gameplay \
            -p astraweave-audio \
            -p astraweave-npc \
            -p astraweave-input \
            -p astraweave-ui \
            -p astraweave-net \
            -p astraweave-director \
            -p astraweave-memory \
            -p astraweave-persona \
            -p astraweave-llm \
            -p astraweave-ipc \
            -p astraweave-author \
            -p hello_companion

      # Build working examples - only ones that are known to work
      - name: Build (debug) - Working Examples
        shell: bash
        continue-on-error: true  # Some examples may have dependency issues
        run: |
          cargo build --frozen --verbose \
            -p hello_companion \
            -p physics_demo3d \
            -p debug_overlay

      # Optionally, also build release artifacts for core components on Ubuntu
      - name: Build (release) - Core Components  
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cargo build --frozen --release --verbose \
            -p astraweave-core \
            -p astraweave-ai \
            -p astraweave-physics \
            -p astraweave-nav \
            -p astraweave-render \
            -p hello_companion

      # Optional checks - only on Ubuntu to avoid redundancy
      - name: Format check - Core Components
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cargo fmt --check \
            -p astraweave-core \
            -p astraweave-ai \
            -p astraweave-physics \
            -p astraweave-nav \
            -p astraweave-render \
            -p hello_companion

      - name: Clippy (lint) - Core Components
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cargo clippy --frozen \
            -p astraweave-core \
            -p astraweave-ai \
            -p astraweave-physics \
            -p astraweave-nav \
            -p astraweave-render \
            -p hello_companion \
            --all-features -- -D warnings

  # You can create a separate job for unit tests, but build is the top priority initially.
