name: Comprehensive CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Prevent multiple CI runs on same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Harden token scope (helps with Scorecard "Token-Permissions")
permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0  # Better for CI with sccache
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  # Consistent exclusion list for problematic crates
  EXCLUDED_PACKAGES: "--exclude astraweave-author --exclude visual_3d --exclude ui_controls_demo --exclude npc_town_demo --exclude rhai_authoring --exclude cutscene_render_demo --exclude weaving_playground --exclude combat_physics_demo --exclude navmesh_demo --exclude physics_demo3d"

jobs:
  check:
    name: Check (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy, rust-src, rust-analyzer

      # ---- OS-specific system dependencies ----
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config

      # ---- Cargo cache ----
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ci-${{ matrix.os }}-v3
          cache-all-crates: true
          cache-directories: |
            ~/.cargo/bin/
            ~/.cargo/registry/cache/
          save-if: ${{ github.ref == 'refs/heads/main' }}

      # ---- Pre-fetch for better caching determinism ----
      - name: Fetch dependencies
        run: cargo fetch --locked

      # ---- Core component checks ----
      - name: Cargo check (workspace, excludes)
        run: >
          cargo check --locked --workspace
          ${{ env.EXCLUDED_PACKAGES }}

  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy

      # ---- OS-specific system dependencies ----
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config

      # ---- Cargo cache ----
      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: build-${{ matrix.os }}-v3
          cache-all-crates: true
          cache-directories: |
            ~/.cargo/bin/
            ~/.cargo/registry/cache/

      # ---- Build core working components (debug) ----
      - name: Build core components (debug)
        run: >
          cargo build --frozen --verbose
          -p astraweave-core
          -p astraweave-ai
          -p astraweave-physics
          -p astraweave-nav
          -p astraweave-render
          -p astraweave-gameplay
          -p astraweave-audio
          -p astraweave-npc
          -p astraweave-input
          -p astraweave-ui
          -p astraweave-net
          -p astraweave-director
          -p astraweave-memory
          -p astraweave-persona
          -p astraweave-ipc
          -p hello_companion

      # ---- Build working examples (debug, non-blocking) ----
      - name: Build working examples (debug)
        continue-on-error: true
        run: >
          cargo build --frozen --verbose
          -p hello_companion
          -p adaptive_boss
          -p companion_profile
          -p ipc_loopback
          -p llm_toolcall
          -p phase_director
          -p persona_loader
          -p coop_server
          -p coop_client
          -p audio_spatial_demo
          -p dialogue_voice_demo

      # ---- Release build for selected core components ----
      - name: Build core components (release)
        run: >
          cargo build --frozen --release --verbose
          -p astraweave-core
          -p astraweave-ai
          -p astraweave-physics
          -p astraweave-nav
          -p astraweave-render
          -p hello_companion

  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      # ---- OS-specific system dependencies ----
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config

      # ---- Cargo cache ----
      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.os }}-v3
          cache-all-crates: true

      # ---- Run tests ----
      - name: Run tests (workspace, excludes)
        run: >
          cargo test --workspace --locked --lib
          ${{ env.EXCLUDED_PACKAGES }}

  linting:
    name: Code Quality (Linux)
    runs-on: ubuntu-latest
    needs: check

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: linting-v3
          cache-all-crates: true

      # ---- Code formatting ----
      - name: Check code formatting
        run: cargo fmt --all --check

      # ---- Clippy linting ----
      - name: Run Clippy (workspace, excludes, warnings as errors)
        run: >
          cargo clippy --workspace --locked
          ${{ env.EXCLUDED_PACKAGES }}
          --all-features --all-targets -- -D warnings

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: check

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: security-v3
          cache-all-crates: true

      - name: Install cargo-audit
        run: cargo install --locked cargo-audit || echo "cargo-audit already installed"

      - name: Run security audit
        run: cargo audit --ignore RUSTSEC-2020-0071 || echo "Audit completed with warnings"

      - name: Run cargo-deny (if config present)
        run: |
          if [ -f "deny.toml" ] || [ -f ".cargo/deny.toml" ] || [ -f "deny/config.toml" ]; then
            cargo install --locked cargo-deny || echo "cargo-deny already installed"
            cargo deny check || echo "Deny check completed with warnings"
          else
            echo "cargo-deny config not found; skipping."
          fi

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev \
            libasound2-dev libudev-dev

      - name: Extract MSRV from Cargo.toml
        id: msrv
        shell: bash
        run: |
          MSRV=$(grep -hR '^\s*rust-version\s*=' --include Cargo.toml . | head -1 | sed 's/.*"//;s/".*//')
          if [ -z "$MSRV" ]; then MSRV="1.89.0"; fi
          echo "version=$MSRV" >> $GITHUB_OUTPUT

      - name: Install MSRV toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.msrv.outputs.version }}

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: msrv-${{ steps.msrv.outputs.version }}-v3

      - name: Check MSRV compatibility
        run: >
          cargo check --workspace --locked
          ${{ env.EXCLUDED_PACKAGES }}

  demo:
    name: Demo Execution (Linux)
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config cmake ninja-build \
            libx11-dev libxi-dev libxcursor-dev libxrandr-dev libxinerama-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev \
            libxcb1-dev libxcb-randr0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-xkb-dev \
            libgl1-mesa-dev libegl1-mesa-dev wayland-protocols libwayland-dev \
            libasound2-dev libpulse-dev libudev-dev mesa-vulkan-drivers vulkan-tools

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: demo-v3
          cache-all-crates: true

      - name: Build hello_companion demo
        run: cargo build --release -p hello_companion

      - name: Run hello_companion demo (with timeout)
        run: |
          echo "Running hello_companion demo for 10 seconds..."
          timeout 10s cargo run --release -p hello_companion || echo "Demo completed or timed out as expected"

      - name: Upload demo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hello_companion-demo-linux
          path: target/release/hello_companion
          retention-days: 7
